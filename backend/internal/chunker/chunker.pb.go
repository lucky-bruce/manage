// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chunker/chunker.proto

package chunker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_f15a05a1167d768c, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type Request struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f15a05a1167d768c, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Chunk)(nil), "chunker.Chunk")
	proto.RegisterType((*Request)(nil), "chunker.Request")
}

func init() { proto.RegisterFile("chunker/chunker.proto", fileDescriptor_f15a05a1167d768c) }

var fileDescriptor_f15a05a1167d768c = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0x28, 0xcd,
	0xcb, 0x4e, 0x2d, 0xd2, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae,
	0x92, 0x2c, 0x17, 0xab, 0x33, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x0a, 0x16, 0x93, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x09, 0x82, 0x70, 0x94, 0xa4, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72, 0xc0, 0xd2, 0x9c, 0x41, 0x20, 0xa6, 0x91, 0x15, 0x17,
	0xbb, 0x33, 0xc4, 0x18, 0x21, 0x7d, 0x04, 0x53, 0x40, 0x0f, 0x66, 0x15, 0x54, 0xa7, 0x14, 0x1f,
	0x5c, 0x04, 0xac, 0x46, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x0e, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x02, 0xe9, 0xf1, 0xa0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkerClient is the client API for Chunker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkerClient interface {
	Chunker(ctx context.Context, in *Request, opts ...grpc.CallOption) (Chunker_ChunkerClient, error)
}

type chunkerClient struct {
	cc *grpc.ClientConn
}

func NewChunkerClient(cc *grpc.ClientConn) ChunkerClient {
	return &chunkerClient{cc}
}

func (c *chunkerClient) Chunker(ctx context.Context, in *Request, opts ...grpc.CallOption) (Chunker_ChunkerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chunker_serviceDesc.Streams[0], "/chunker.Chunker/Chunker", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkerChunkerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chunker_ChunkerClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type chunkerChunkerClient struct {
	grpc.ClientStream
}

func (x *chunkerChunkerClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkerServer is the server API for Chunker service.
type ChunkerServer interface {
	Chunker(*Request, Chunker_ChunkerServer) error
}

// UnimplementedChunkerServer can be embedded to have forward compatible implementations.
type UnimplementedChunkerServer struct {
}

func (*UnimplementedChunkerServer) Chunker(req *Request, srv Chunker_ChunkerServer) error {
	return status.Errorf(codes.Unimplemented, "method Chunker not implemented")
}

func RegisterChunkerServer(s *grpc.Server, srv ChunkerServer) {
	s.RegisterService(&_Chunker_serviceDesc, srv)
}

func _Chunker_Chunker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkerServer).Chunker(m, &chunkerChunkerServer{stream})
}

type Chunker_ChunkerServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type chunkerChunkerServer struct {
	grpc.ServerStream
}

func (x *chunkerChunkerServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Chunker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chunker.Chunker",
	HandlerType: (*ChunkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chunker",
			Handler:       _Chunker_Chunker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chunker/chunker.proto",
}
