// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db/db.proto

package db

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7886bedee616d896, []int{0}
}

func (m *Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Params.Unmarshal(m, b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Params.Marshal(b, m, deterministic)
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return xxx_messageInfo_Params.Size(m)
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Params) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type Response struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7886bedee616d896, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "db.Params")
	proto.RegisterType((*Response)(nil), "db.Response")
}

func init() { proto.RegisterFile("db/db.proto", fileDescriptor_7886bedee616d896) }

var fileDescriptor_7886bedee616d896 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x49, 0xd2, 0x4f,
	0x49, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x49, 0x52, 0xb2, 0xe3, 0x62, 0x0b,
	0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x16, 0x12, 0xe1, 0x62, 0x4d, 0xcb, 0x4c, 0xcd, 0x49, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0xe4, 0xb8, 0xb8, 0x92, 0xf3, 0x73, 0x72, 0x52,
	0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0x52, 0x48, 0x22, 0x4a, 0x4a, 0x5c, 0x1c, 0x41,
	0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x65, 0x89, 0x39, 0xa5, 0xa9,
	0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x91, 0x11, 0x17, 0xa7, 0x4b, 0x52,
	0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x2a, 0x17, 0xa7, 0x7b, 0x6a, 0x49, 0x68, 0x5e,
	0x66, 0x61, 0x69, 0xaa, 0x10, 0x97, 0x5e, 0x4a, 0x92, 0x1e, 0xc4, 0x7e, 0x29, 0x1e, 0x10, 0x1b,
	0x66, 0x56, 0x12, 0x1b, 0xd8, 0x89, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x4d, 0x52,
	0xaf, 0xb1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DbServiceClient interface {
	GetUnique(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Response, error)
}

type dbServiceClient struct {
	cc *grpc.ClientConn
}

func NewDbServiceClient(cc *grpc.ClientConn) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) GetUnique(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/db.DbService/GetUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
type DbServiceServer interface {
	GetUnique(context.Context, *Params) (*Response, error)
}

// UnimplementedDbServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDbServiceServer struct {
}

func (*UnimplementedDbServiceServer) GetUnique(ctx context.Context, req *Params) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnique not implemented")
}

func RegisterDbServiceServer(s *grpc.Server, srv DbServiceServer) {
	s.RegisterService(&_DbService_serviceDesc, srv)
}

func _DbService_GetUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DbService/GetUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUnique(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.DbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnique",
			Handler:    _DbService_GetUnique_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db/db.proto",
}
