/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.products.EmptyResponse', null, global);
goog.exportSymbol('proto.products.Image', null, global);
goog.exportSymbol('proto.products.ImageResponse', null, global);
goog.exportSymbol('proto.products.Product', null, global);
goog.exportSymbol('proto.products.ProductParams', null, global);
goog.exportSymbol('proto.products.ProductResponse', null, global);
goog.exportSymbol('proto.products.Query', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.ProductParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.products.ProductParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.ProductParams.displayName = 'proto.products.ProductParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.ProductParams.prototype.toObject = function(opt_includeInstance) {
  return proto.products.ProductParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.ProductParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ProductParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jwt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    query: (f = msg.getQuery()) && proto.products.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.ProductParams}
 */
proto.products.ProductParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.ProductParams;
  return proto.products.ProductParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.ProductParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.ProductParams}
 */
proto.products.ProductParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 4:
      var value = new proto.products.Query;
      reader.readMessage(value,proto.products.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.ProductParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.ProductParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.ProductParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ProductParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.products.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.products.ProductParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.products.ProductParams.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jwt = 2;
 * @return {string}
 */
proto.products.ProductParams.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.products.ProductParams.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Query query = 4;
 * @return {?proto.products.Query}
 */
proto.products.ProductParams.prototype.getQuery = function() {
  return /** @type{?proto.products.Query} */ (
    jspb.Message.getWrapperField(this, proto.products.Query, 4));
};


/** @param {?proto.products.Query|undefined} value */
proto.products.ProductParams.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.products.ProductParams.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.products.ProductParams.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.products.Query.repeatedFields_, null);
};
goog.inherits(proto.products.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.Query.displayName = 'proto.products.Query';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.products.Query.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.products.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sortfieldsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.Query}
 */
proto.products.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.Query;
  return proto.products.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.Query}
 */
proto.products.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSortfields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuerystring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSortfieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string Querystring = 1;
 * @return {string}
 */
proto.products.Query.prototype.getQuerystring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.products.Query.prototype.setQuerystring = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string sortFields = 2;
 * @return {!Array<string>}
 */
proto.products.Query.prototype.getSortfieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.products.Query.prototype.setSortfieldsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.products.Query.prototype.addSortfields = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.products.Query.prototype.clearSortfieldsList = function() {
  this.setSortfieldsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.ProductResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.products.ProductResponse.repeatedFields_, null);
};
goog.inherits(proto.products.ProductResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.ProductResponse.displayName = 'proto.products.ProductResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.products.ProductResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.ProductResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.products.ProductResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.ProductResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ProductResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.products.Product.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.ProductResponse}
 */
proto.products.ProductResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.ProductResponse;
  return proto.products.ProductResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.ProductResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.ProductResponse}
 */
proto.products.ProductResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.products.Product;
      reader.readMessage(value,proto.products.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.ProductResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.ProductResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.ProductResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ProductResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.products.Product.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.products.Product>}
 */
proto.products.ProductResponse.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.products.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.products.Product, 1));
};


/** @param {!Array<!proto.products.Product>} value */
proto.products.ProductResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.products.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.products.Product}
 */
proto.products.ProductResponse.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.products.Product, opt_index);
};


proto.products.ProductResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.EmptyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.products.EmptyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.EmptyResponse.displayName = 'proto.products.EmptyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.EmptyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.products.EmptyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.EmptyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.EmptyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.EmptyResponse}
 */
proto.products.EmptyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.EmptyResponse;
  return proto.products.EmptyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.EmptyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.EmptyResponse}
 */
proto.products.EmptyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.EmptyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.EmptyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.EmptyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.EmptyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.ImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.products.ImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.ImageResponse.displayName = 'proto.products.ImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.ImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.products.ImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.ImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.ImageResponse}
 */
proto.products.ImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.ImageResponse;
  return proto.products.ImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.ImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.ImageResponse}
 */
proto.products.ImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.ImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.ImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.ImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.ImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.products.ImageResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.products.ImageResponse.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.products.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.Image.displayName = 'proto.products.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.products.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.Image}
 */
proto.products.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.Image;
  return proto.products.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.Image}
 */
proto.products.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string image = 1;
 * @return {string}
 */
proto.products.Image.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.products.Image.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ext = 2;
 * @return {string}
 */
proto.products.Image.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.products.Image.prototype.setExt = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.products.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.products.Product.repeatedFields_, null);
};
goog.inherits(proto.products.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.products.Product.displayName = 'proto.products.Product';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.products.Product.repeatedFields_ = [18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.products.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.products.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.products.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    qtyinstock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subcategory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sector: jspb.Message.getFieldWithDefault(msg, 5, ""),
    buyingprice: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    desiredprofit: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    sellingprice: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    addedtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    description: jspb.Message.getFieldWithDefault(msg, 10, ""),
    id: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sizew: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    sizel: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    sized: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    sizeh: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    userid: jspb.Message.getFieldWithDefault(msg, 17, ""),
    imagesList: jspb.Message.getRepeatedField(msg, 18),
    barcode: jspb.Message.getFieldWithDefault(msg, 19, ""),
    soldby: jspb.Message.getFieldWithDefault(msg, 20, ""),
    discount: +jspb.Message.getFieldWithDefault(msg, 21, 0.0),
    brand: jspb.Message.getFieldWithDefault(msg, 22, ""),
    brandmodel: jspb.Message.getFieldWithDefault(msg, 23, ""),
    measurementunit: jspb.Message.getFieldWithDefault(msg, 25, ""),
    portionunit: jspb.Message.getFieldWithDefault(msg, 27, ""),
    portionvalue: +jspb.Message.getFieldWithDefault(msg, 28, 0.0),
    minqtyinstock: jspb.Message.getFieldWithDefault(msg, 29, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.products.Product}
 */
proto.products.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.products.Product;
  return proto.products.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.products.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.products.Product}
 */
proto.products.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQtyinstock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubcategory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSector(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuyingprice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDesiredprofit(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSellingprice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddedtime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizew(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizel(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSized(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizeh(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addImages(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcode(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoldby(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDiscount(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandmodel(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeasurementunit(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortionunit(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPortionvalue(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinqtyinstock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.products.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.products.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.products.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.products.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQtyinstock();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubcategory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSector();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBuyingprice();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDesiredprofit();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getSellingprice();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getAddedtime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSizew();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getSizel();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getSized();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getSizeh();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getBarcode();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getSoldby();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0.0) {
    writer.writeFloat(
      21,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getBrandmodel();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getMeasurementunit();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getPortionunit();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getPortionvalue();
  if (f !== 0.0) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = message.getMinqtyinstock();
  if (f !== 0) {
    writer.writeUint32(
      29,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.products.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 qtyinstock = 2;
 * @return {number}
 */
proto.products.Product.prototype.getQtyinstock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.products.Product.prototype.setQtyinstock = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string category = 3;
 * @return {string}
 */
proto.products.Product.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setCategory = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subcategory = 4;
 * @return {string}
 */
proto.products.Product.prototype.getSubcategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setSubcategory = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sector = 5;
 * @return {string}
 */
proto.products.Product.prototype.getSector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setSector = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional float buyingprice = 6;
 * @return {number}
 */
proto.products.Product.prototype.getBuyingprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setBuyingprice = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float desiredprofit = 7;
 * @return {number}
 */
proto.products.Product.prototype.getDesiredprofit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setDesiredprofit = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float sellingprice = 8;
 * @return {number}
 */
proto.products.Product.prototype.getSellingprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setSellingprice = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional int64 addedtime = 9;
 * @return {number}
 */
proto.products.Product.prototype.getAddedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.products.Product.prototype.setAddedtime = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string description = 10;
 * @return {string}
 */
proto.products.Product.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string id = 11;
 * @return {string}
 */
proto.products.Product.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional float sizew = 12;
 * @return {number}
 */
proto.products.Product.prototype.getSizew = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setSizew = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float sizel = 13;
 * @return {number}
 */
proto.products.Product.prototype.getSizel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setSizel = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float sized = 14;
 * @return {number}
 */
proto.products.Product.prototype.getSized = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setSized = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float sizeh = 15;
 * @return {number}
 */
proto.products.Product.prototype.getSizeh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setSizeh = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional string userid = 17;
 * @return {string}
 */
proto.products.Product.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * repeated string images = 18;
 * @return {!Array<string>}
 */
proto.products.Product.prototype.getImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array<string>} value */
proto.products.Product.prototype.setImagesList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.products.Product.prototype.addImages = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.products.Product.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * optional string barcode = 19;
 * @return {string}
 */
proto.products.Product.prototype.getBarcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setBarcode = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string soldby = 20;
 * @return {string}
 */
proto.products.Product.prototype.getSoldby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setSoldby = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional float discount = 21;
 * @return {number}
 */
proto.products.Product.prototype.getDiscount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setDiscount = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional string brand = 22;
 * @return {string}
 */
proto.products.Product.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setBrand = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string brandmodel = 23;
 * @return {string}
 */
proto.products.Product.prototype.getBrandmodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setBrandmodel = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string measurementunit = 25;
 * @return {string}
 */
proto.products.Product.prototype.getMeasurementunit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setMeasurementunit = function(value) {
  jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional string portionunit = 27;
 * @return {string}
 */
proto.products.Product.prototype.getPortionunit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.products.Product.prototype.setPortionunit = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional float portionvalue = 28;
 * @return {number}
 */
proto.products.Product.prototype.getPortionvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 28, 0.0));
};


/** @param {number} value */
proto.products.Product.prototype.setPortionvalue = function(value) {
  jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional uint32 minqtyinstock = 29;
 * @return {number}
 */
proto.products.Product.prototype.getMinqtyinstock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.products.Product.prototype.setMinqtyinstock = function(value) {
  jspb.Message.setProto3IntField(this, 29, value);
};


goog.object.extend(exports, proto.products);
