/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var products_products_pb = require('../products/products_pb.js');
var services_services_pb = require('../services/services_pb.js');
goog.exportSymbol('proto.quotes.Distance', null, global);
goog.exportSymbol('proto.quotes.DistanceParams', null, global);
goog.exportSymbol('proto.quotes.Quote', null, global);
goog.exportSymbol('proto.quotes.QuoteParams', null, global);
goog.exportSymbol('proto.quotes.QuoteProduct', null, global);
goog.exportSymbol('proto.quotes.QuoteResponse', null, global);
goog.exportSymbol('proto.quotes.Response', null, global);
goog.exportSymbol('proto.quotes.ServiceInQuote', null, global);
goog.exportSymbol('proto.quotes.Stats', null, global);
goog.exportSymbol('proto.quotes.Status', null, global);
goog.exportSymbol('proto.quotes.StatusParams', null, global);
goog.exportSymbol('proto.quotes.Suppliers', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.QuoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotes.QuoteResponse.repeatedFields_, null);
};
goog.inherits(proto.quotes.QuoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.QuoteResponse.displayName = 'proto.quotes.QuoteResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotes.QuoteResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.QuoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.QuoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.QuoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quotesList: jspb.Message.toObjectList(msg.getQuotesList(),
    proto.quotes.Quote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.QuoteResponse}
 */
proto.quotes.QuoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.QuoteResponse;
  return proto.quotes.QuoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.QuoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.QuoteResponse}
 */
proto.quotes.QuoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotes.Quote;
      reader.readMessage(value,proto.quotes.Quote.deserializeBinaryFromReader);
      msg.addQuotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.QuoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.QuoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.QuoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quotes.Quote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Quote quotes = 1;
 * @return {!Array<!proto.quotes.Quote>}
 */
proto.quotes.QuoteResponse.prototype.getQuotesList = function() {
  return /** @type{!Array<!proto.quotes.Quote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotes.Quote, 1));
};


/** @param {!Array<!proto.quotes.Quote>} value */
proto.quotes.QuoteResponse.prototype.setQuotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quotes.Quote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotes.Quote}
 */
proto.quotes.QuoteResponse.prototype.addQuotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quotes.Quote, opt_index);
};


proto.quotes.QuoteResponse.prototype.clearQuotesList = function() {
  this.setQuotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.QuoteParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.QuoteParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.QuoteParams.displayName = 'proto.quotes.QuoteParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.QuoteParams.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.QuoteParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.QuoteParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jwt: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.QuoteParams}
 */
proto.quotes.QuoteParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.QuoteParams;
  return proto.quotes.QuoteParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.QuoteParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.QuoteParams}
 */
proto.quotes.QuoteParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.QuoteParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.QuoteParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.QuoteParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.quotes.QuoteParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotes.QuoteParams.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jwt = 2;
 * @return {string}
 */
proto.quotes.QuoteParams.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotes.QuoteParams.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.Response.displayName = 'proto.quotes.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.Response}
 */
proto.quotes.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.Response;
  return proto.quotes.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.Response}
 */
proto.quotes.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quotes.Response.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotes.Response.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.StatusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.StatusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.StatusParams.displayName = 'proto.quotes.StatusParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.StatusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.StatusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.StatusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.StatusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.StatusParams}
 */
proto.quotes.StatusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.StatusParams;
  return proto.quotes.StatusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.StatusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.StatusParams}
 */
proto.quotes.StatusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.StatusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.StatusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.StatusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.StatusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.quotes.StatusParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.quotes.StatusParams.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.quotes.StatusParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotes.StatusParams.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.Stats.displayName = 'proto.quotes.Stats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pending: jspb.Message.getFieldWithDefault(msg, 2, 0),
    denied: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pb_new: jspb.Message.getFieldWithDefault(msg, 4, 0),
    applied: jspb.Message.getFieldWithDefault(msg, 5, 0),
    preparation: jspb.Message.getFieldWithDefault(msg, 6, 0),
    production: jspb.Message.getFieldWithDefault(msg, 7, 0),
    delivered: jspb.Message.getFieldWithDefault(msg, 10, 0),
    completed: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cancelled: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.Stats}
 */
proto.quotes.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.Stats;
  return proto.quotes.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.Stats}
 */
proto.quotes.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPending(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDenied(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNew(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApplied(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreparation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProduction(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelivered(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompleted(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCancelled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPending();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDenied();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNew();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getApplied();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPreparation();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getProduction();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getDelivered();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getCancelled();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * optional uint32 active = 1;
 * @return {number}
 */
proto.quotes.Stats.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setActive = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pending = 2;
 * @return {number}
 */
proto.quotes.Stats.prototype.getPending = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setPending = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 denied = 3;
 * @return {number}
 */
proto.quotes.Stats.prototype.getDenied = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setDenied = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 new = 4;
 * @return {number}
 */
proto.quotes.Stats.prototype.getNew = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setNew = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 applied = 5;
 * @return {number}
 */
proto.quotes.Stats.prototype.getApplied = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setApplied = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 preparation = 6;
 * @return {number}
 */
proto.quotes.Stats.prototype.getPreparation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setPreparation = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 production = 7;
 * @return {number}
 */
proto.quotes.Stats.prototype.getProduction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setProduction = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 delivered = 10;
 * @return {number}
 */
proto.quotes.Stats.prototype.getDelivered = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setDelivered = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 completed = 12;
 * @return {number}
 */
proto.quotes.Stats.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setCompleted = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 cancelled = 13;
 * @return {number}
 */
proto.quotes.Stats.prototype.getCancelled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.quotes.Stats.prototype.setCancelled = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.QuoteProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.QuoteProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.QuoteProduct.displayName = 'proto.quotes.QuoteProduct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.QuoteProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.QuoteProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.QuoteProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && products_products_pb.Product.toObject(includeInstance, f),
    qty: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizel: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    sizew: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    sizeh: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    sizer: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.QuoteProduct}
 */
proto.quotes.QuoteProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.QuoteProduct;
  return proto.quotes.QuoteProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.QuoteProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.QuoteProduct}
 */
proto.quotes.QuoteProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new products_products_pb.Product;
      reader.readMessage(value,products_products_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQty(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizew(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizeh(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSizer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.QuoteProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.QuoteProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.QuoteProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.QuoteProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      products_products_pb.Product.serializeBinaryToWriter
    );
  }
  f = message.getQty();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSizel();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSizew();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSizeh();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSizer();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional products.Product product = 1;
 * @return {?proto.products.Product}
 */
proto.quotes.QuoteProduct.prototype.getProduct = function() {
  return /** @type{?proto.products.Product} */ (
    jspb.Message.getWrapperField(this, products_products_pb.Product, 1));
};


/** @param {?proto.products.Product|undefined} value */
proto.quotes.QuoteProduct.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.quotes.QuoteProduct.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.quotes.QuoteProduct.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 qty = 2;
 * @return {number}
 */
proto.quotes.QuoteProduct.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.quotes.QuoteProduct.prototype.setQty = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float sizel = 3;
 * @return {number}
 */
proto.quotes.QuoteProduct.prototype.getSizel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.quotes.QuoteProduct.prototype.setSizel = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float sizew = 4;
 * @return {number}
 */
proto.quotes.QuoteProduct.prototype.getSizew = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.quotes.QuoteProduct.prototype.setSizew = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float sizeh = 5;
 * @return {number}
 */
proto.quotes.QuoteProduct.prototype.getSizeh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.quotes.QuoteProduct.prototype.setSizeh = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float sizer = 6;
 * @return {number}
 */
proto.quotes.QuoteProduct.prototype.getSizer = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.quotes.QuoteProduct.prototype.setSizer = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.ServiceInQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.ServiceInQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.ServiceInQuote.displayName = 'proto.quotes.ServiceInQuote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.ServiceInQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.ServiceInQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.ServiceInQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.ServiceInQuote.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && services_services_pb.Service.toObject(includeInstance, f),
    qty: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.ServiceInQuote}
 */
proto.quotes.ServiceInQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.ServiceInQuote;
  return proto.quotes.ServiceInQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.ServiceInQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.ServiceInQuote}
 */
proto.quotes.ServiceInQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_services_pb.Service;
      reader.readMessage(value,services_services_pb.Service.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.ServiceInQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.ServiceInQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.ServiceInQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.ServiceInQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      services_services_pb.Service.serializeBinaryToWriter
    );
  }
  f = message.getQty();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional services.Service service = 1;
 * @return {?proto.services.Service}
 */
proto.quotes.ServiceInQuote.prototype.getService = function() {
  return /** @type{?proto.services.Service} */ (
    jspb.Message.getWrapperField(this, services_services_pb.Service, 1));
};


/** @param {?proto.services.Service|undefined} value */
proto.quotes.ServiceInQuote.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.quotes.ServiceInQuote.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.quotes.ServiceInQuote.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 qty = 2;
 * @return {number}
 */
proto.quotes.ServiceInQuote.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.quotes.ServiceInQuote.prototype.setQty = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.Suppliers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.Suppliers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.Suppliers.displayName = 'proto.quotes.Suppliers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.Suppliers.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.Suppliers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.Suppliers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Suppliers.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valid: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.Suppliers}
 */
proto.quotes.Suppliers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.Suppliers;
  return proto.quotes.Suppliers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.Suppliers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.Suppliers}
 */
proto.quotes.Suppliers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.Suppliers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.Suppliers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.Suppliers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Suppliers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quotes.Suppliers.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotes.Suppliers.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool valid = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.quotes.Suppliers.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.quotes.Suppliers.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.Distance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.Distance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.Distance.displayName = 'proto.quotes.Distance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.Distance.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.Distance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.Distance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Distance.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.Distance}
 */
proto.quotes.Distance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.Distance;
  return proto.quotes.Distance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.Distance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.Distance}
 */
proto.quotes.Distance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.Distance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.Distance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.Distance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Distance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 distance = 1;
 * @return {number}
 */
proto.quotes.Distance.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.quotes.Distance.prototype.setDistance = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.DistanceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotes.DistanceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.DistanceParams.displayName = 'proto.quotes.DistanceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.DistanceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.DistanceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.DistanceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.DistanceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.DistanceParams}
 */
proto.quotes.DistanceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.DistanceParams;
  return proto.quotes.DistanceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.DistanceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.DistanceParams}
 */
proto.quotes.DistanceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.DistanceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.DistanceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.DistanceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.DistanceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.quotes.DistanceParams.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotes.DistanceParams.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.quotes.DistanceParams.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotes.DistanceParams.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotes.Quote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotes.Quote.repeatedFields_, null);
};
goog.inherits(proto.quotes.Quote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotes.Quote.displayName = 'proto.quotes.Quote';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotes.Quote.repeatedFields_ = [6,7,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotes.Quote.prototype.toObject = function(opt_includeInstance) {
  return proto.quotes.Quote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotes.Quote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Quote.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phonenumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    email: jspb.Message.getFieldWithDefault(msg, 5, ""),
    supplieridsList: jspb.Message.toObjectList(msg.getSupplieridsList(),
    proto.quotes.Suppliers.toObject, includeInstance),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.quotes.QuoteProduct.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    city: jspb.Message.getFieldWithDefault(msg, 11, ""),
    address: jspb.Message.getFieldWithDefault(msg, 12, ""),
    zip: jspb.Message.getFieldWithDefault(msg, 13, ""),
    size: jspb.Message.getFieldWithDefault(msg, 14, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 15, ""),
    status: jspb.Message.getFieldWithDefault(msg, 16, 0),
    sumprice: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    paidprice: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.quotes.ServiceInQuote.toObject, includeInstance),
    qrcodeurl: jspb.Message.getFieldWithDefault(msg, 20, ""),
    delivery: +jspb.Message.getFieldWithDefault(msg, 21, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotes.Quote}
 */
proto.quotes.Quote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotes.Quote;
  return proto.quotes.Quote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotes.Quote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotes.Quote}
 */
proto.quotes.Quote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 6:
      var value = new proto.quotes.Suppliers;
      reader.readMessage(value,proto.quotes.Suppliers.deserializeBinaryFromReader);
      msg.addSupplierids(value);
      break;
    case 7:
      var value = new proto.quotes.QuoteProduct;
      reader.readMessage(value,proto.quotes.QuoteProduct.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setZip(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 16:
      var value = /** @type {!proto.quotes.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSumprice(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPaidprice(value);
      break;
    case 19:
      var value = new proto.quotes.ServiceInQuote;
      reader.readMessage(value,proto.quotes.ServiceInQuote.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setQrcodeurl(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDelivery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotes.Quote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotes.Quote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotes.Quote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quotes.Quote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSupplieridsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.quotes.Suppliers.serializeBinaryToWriter
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.quotes.QuoteProduct.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getZip();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSize();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getSumprice();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getPaidprice();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.quotes.ServiceInQuote.serializeBinaryToWriter
    );
  }
  f = message.getQrcodeurl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getDelivery();
  if (f !== 0.0) {
    writer.writeFloat(
      21,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quotes.Quote.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phonenumber = 3;
 * @return {string}
 */
proto.quotes.Quote.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setPhonenumber = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.quotes.Quote.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.quotes.Quote.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string email = 5;
 * @return {string}
 */
proto.quotes.Quote.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Suppliers supplierids = 6;
 * @return {!Array<!proto.quotes.Suppliers>}
 */
proto.quotes.Quote.prototype.getSupplieridsList = function() {
  return /** @type{!Array<!proto.quotes.Suppliers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotes.Suppliers, 6));
};


/** @param {!Array<!proto.quotes.Suppliers>} value */
proto.quotes.Quote.prototype.setSupplieridsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.quotes.Suppliers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotes.Suppliers}
 */
proto.quotes.Quote.prototype.addSupplierids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.quotes.Suppliers, opt_index);
};


proto.quotes.Quote.prototype.clearSupplieridsList = function() {
  this.setSupplieridsList([]);
};


/**
 * repeated QuoteProduct products = 7;
 * @return {!Array<!proto.quotes.QuoteProduct>}
 */
proto.quotes.Quote.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.quotes.QuoteProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotes.QuoteProduct, 7));
};


/** @param {!Array<!proto.quotes.QuoteProduct>} value */
proto.quotes.Quote.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.quotes.QuoteProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotes.QuoteProduct}
 */
proto.quotes.Quote.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.quotes.QuoteProduct, opt_index);
};


proto.quotes.Quote.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.quotes.Quote.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string city = 11;
 * @return {string}
 */
proto.quotes.Quote.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string address = 12;
 * @return {string}
 */
proto.quotes.Quote.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string zip = 13;
 * @return {string}
 */
proto.quotes.Quote.prototype.getZip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setZip = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string size = 14;
 * @return {string}
 */
proto.quotes.Quote.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setSize = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string userid = 15;
 * @return {string}
 */
proto.quotes.Quote.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional Status status = 16;
 * @return {!proto.quotes.Status}
 */
proto.quotes.Quote.prototype.getStatus = function() {
  return /** @type {!proto.quotes.Status} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.quotes.Status} value */
proto.quotes.Quote.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional float sumPrice = 17;
 * @return {number}
 */
proto.quotes.Quote.prototype.getSumprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.quotes.Quote.prototype.setSumprice = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float paidPrice = 18;
 * @return {number}
 */
proto.quotes.Quote.prototype.getPaidprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.quotes.Quote.prototype.setPaidprice = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * repeated ServiceInQuote services = 19;
 * @return {!Array<!proto.quotes.ServiceInQuote>}
 */
proto.quotes.Quote.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.quotes.ServiceInQuote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotes.ServiceInQuote, 19));
};


/** @param {!Array<!proto.quotes.ServiceInQuote>} value */
proto.quotes.Quote.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.quotes.ServiceInQuote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotes.ServiceInQuote}
 */
proto.quotes.Quote.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.quotes.ServiceInQuote, opt_index);
};


proto.quotes.Quote.prototype.clearServicesList = function() {
  this.setServicesList([]);
};


/**
 * optional string qrcodeurl = 20;
 * @return {string}
 */
proto.quotes.Quote.prototype.getQrcodeurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.quotes.Quote.prototype.setQrcodeurl = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional float delivery = 21;
 * @return {number}
 */
proto.quotes.Quote.prototype.getDelivery = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.quotes.Quote.prototype.setDelivery = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * @enum {number}
 */
proto.quotes.Status = {
  NEW: 0,
  SUPPLIER_APPLIED: 1,
  CLIENT_APPLIED: 2,
  PREPARATION: 3,
  PRODUCTION: 4,
  DELIVERED: 5,
  COMPLETED: 6,
  CANCELLED: 7,
  SUPPLIER_REJECTED: 8,
  CLIENT_REJECTED: 9
};

goog.object.extend(exports, proto.quotes);
