/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var products_products_pb = require("../products/products_pb.js");
goog.exportSymbol("proto.services.Params", null, global);
goog.exportSymbol("proto.services.Response", null, global);
goog.exportSymbol("proto.services.Service", null, global);
goog.exportSymbol("proto.services.ServicesResponse", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Service = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.services.Service.displayName = "proto.services.Service";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.services.Service.prototype.toObject = function(opt_includeInstance) {
		return proto.services.Service.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.services.Service} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.services.Service.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				id: jspb.Message.getFieldWithDefault(msg, 1, ""),
				name: jspb.Message.getFieldWithDefault(msg, 2, ""),
				userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
				chargetype: jspb.Message.getFieldWithDefault(msg, 4, ""),
				chargevalue: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
				sector: jspb.Message.getFieldWithDefault(msg, 6, "")
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Service}
 */
proto.services.Service.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.services.Service();
	return proto.services.Service.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Service}
 */
proto.services.Service.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setName(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setUserid(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setChargetype(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readFloat());
				msg.setChargevalue(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setSector(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Service.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.services.Service.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Service.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getName();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getUserid();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getChargetype();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getChargevalue();
	if (f !== 0.0) {
		writer.writeFloat(5, f);
	}
	f = message.getSector();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.services.Service.prototype.getId = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		""
	));
};

/** @param {string} value */
proto.services.Service.prototype.setId = function(value) {
	jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.services.Service.prototype.getName = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		""
	));
};

/** @param {string} value */
proto.services.Service.prototype.setName = function(value) {
	jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string userid = 3;
 * @return {string}
 */
proto.services.Service.prototype.getUserid = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		""
	));
};

/** @param {string} value */
proto.services.Service.prototype.setUserid = function(value) {
	jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string chargetype = 4;
 * @return {string}
 */
proto.services.Service.prototype.getChargetype = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		4,
		""
	));
};

/** @param {string} value */
proto.services.Service.prototype.setChargetype = function(value) {
	jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional float chargevalue = 5;
 * @return {number}
 */
proto.services.Service.prototype.getChargevalue = function() {
	return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
		this,
		5,
		0.0
	));
};

/** @param {number} value */
proto.services.Service.prototype.setChargevalue = function(value) {
	jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional string sector = 6;
 * @return {string}
 */
proto.services.Service.prototype.getSector = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		6,
		""
	));
};

/** @param {string} value */
proto.services.Service.prototype.setSector = function(value) {
	jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Params = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.services.Params.displayName = "proto.services.Params";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.services.Params.prototype.toObject = function(opt_includeInstance) {
		return proto.services.Params.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.services.Params} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.services.Params.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				query:
					(f = msg.getQuery()) &&
					products_products_pb.Query.toObject(includeInstance, f),
				id: jspb.Message.getFieldWithDefault(msg, 2, "")
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Params}
 */
proto.services.Params.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.services.Params();
	return proto.services.Params.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Params}
 */
proto.services.Params.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new products_products_pb.Query();
				reader.readMessage(
					value,
					products_products_pb.Query.deserializeBinaryFromReader
				);
				msg.setQuery(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setId(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Params.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.services.Params.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Params.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getQuery();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			products_products_pb.Query.serializeBinaryToWriter
		);
	}
	f = message.getId();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional products.Query query = 1;
 * @return {?proto.products.Query}
 */
proto.services.Params.prototype.getQuery = function() {
	return /** @type{?proto.products.Query} */ (jspb.Message.getWrapperField(
		this,
		products_products_pb.Query,
		1
	));
};

/** @param {?proto.products.Query|undefined} value */
proto.services.Params.prototype.setQuery = function(value) {
	jspb.Message.setWrapperField(this, 1, value);
};

proto.services.Params.prototype.clearQuery = function() {
	this.setQuery(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.services.Params.prototype.hasQuery = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string id = 2;
 * @return {string}
 */
proto.services.Params.prototype.getId = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		""
	));
};

/** @param {string} value */
proto.services.Params.prototype.setId = function(value) {
	jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Response = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.services.Response.displayName = "proto.services.Response";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.services.Response.prototype.toObject = function(opt_includeInstance) {
		return proto.services.Response.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.services.Response} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.services.Response.toObject = function(includeInstance, msg) {
		var f,
			obj = {};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Response}
 */
proto.services.Response.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.services.Response();
	return proto.services.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Response}
 */
proto.services.Response.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Response.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.services.Response.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Response.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ServicesResponse = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.services.ServicesResponse.repeatedFields_,
		null
	);
};
goog.inherits(proto.services.ServicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.services.ServicesResponse.displayName =
		"proto.services.ServicesResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.ServicesResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.services.ServicesResponse.prototype.toObject = function(
		opt_includeInstance
	) {
		return proto.services.ServicesResponse.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.services.ServicesResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.services.ServicesResponse.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				servicesList: jspb.Message.toObjectList(
					msg.getServicesList(),
					proto.services.Service.toObject,
					includeInstance
				)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ServicesResponse}
 */
proto.services.ServicesResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.services.ServicesResponse();
	return proto.services.ServicesResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ServicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ServicesResponse}
 */
proto.services.ServicesResponse.deserializeBinaryFromReader = function(
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.services.Service();
				reader.readMessage(
					value,
					proto.services.Service.deserializeBinaryFromReader
				);
				msg.addServices(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ServicesResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.services.ServicesResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ServicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ServicesResponse.serializeBinaryToWriter = function(
	message,
	writer
) {
	var f = undefined;
	f = message.getServicesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			proto.services.Service.serializeBinaryToWriter
		);
	}
};

/**
 * repeated Service services = 1;
 * @return {!Array<!proto.services.Service>}
 */
proto.services.ServicesResponse.prototype.getServicesList = function() {
	return /** @type{!Array<!proto.services.Service>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		proto.services.Service,
		1
	));
};

/** @param {!Array<!proto.services.Service>} value */
proto.services.ServicesResponse.prototype.setServicesList = function(value) {
	jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.services.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.Service}
 */
proto.services.ServicesResponse.prototype.addServices = function(
	opt_value,
	opt_index
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.services.Service,
		opt_index
	);
};

proto.services.ServicesResponse.prototype.clearServicesList = function() {
	this.setServicesList([]);
};

goog.object.extend(exports, proto.services);
