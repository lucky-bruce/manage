/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.db.Params", null, global);
goog.exportSymbol("proto.db.Response", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db.Params = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.db.Params.displayName = "proto.db.Params";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db.Params.prototype.toObject = function(opt_includeInstance) {
		return proto.db.Params.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db.Params} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db.Params.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				field: jspb.Message.getFieldWithDefault(msg, 1, ""),
				collection: jspb.Message.getFieldWithDefault(msg, 2, "")
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db.Params}
 */
proto.db.Params.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db.Params();
	return proto.db.Params.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db.Params}
 */
proto.db.Params.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setField(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setCollection(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db.Params.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db.Params.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db.Params.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getField();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getCollection();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional string field = 1;
 * @return {string}
 */
proto.db.Params.prototype.getField = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		""
	));
};

/** @param {string} value */
proto.db.Params.prototype.setField = function(value) {
	jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string collection = 2;
 * @return {string}
 */
proto.db.Params.prototype.getCollection = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		""
	));
};

/** @param {string} value */
proto.db.Params.prototype.setCollection = function(value) {
	jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db.Response = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db.Response.repeatedFields_,
		null
	);
};
goog.inherits(proto.db.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.db.Response.displayName = "proto.db.Response";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db.Response.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db.Response.prototype.toObject = function(opt_includeInstance) {
		return proto.db.Response.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db.Response} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db.Response.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				valuesList: jspb.Message.getRepeatedField(msg, 1)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db.Response}
 */
proto.db.Response.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db.Response();
	return proto.db.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db.Response}
 */
proto.db.Response.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.addValues(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db.Response.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db.Response.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db.Response.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getValuesList();
	if (f.length > 0) {
		writer.writeRepeatedString(1, f);
	}
};

/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.db.Response.prototype.getValuesList = function() {
	return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(
		this,
		1
	));
};

/** @param {!Array<string>} value */
proto.db.Response.prototype.setValuesList = function(value) {
	jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.db.Response.prototype.addValues = function(value, opt_index) {
	jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.db.Response.prototype.clearValuesList = function() {
	this.setValuesList([]);
};

goog.object.extend(exports, proto.db);
