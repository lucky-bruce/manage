/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

/* eslint-disable */

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var products_products_pb = require("../products/products_pb.js");
goog.exportSymbol("proto.financial.Bank", null, global);
goog.exportSymbol("proto.financial.EmptyResponse", null, global);
goog.exportSymbol("proto.financial.Expense", null, global);
goog.exportSymbol("proto.financial.Expenses", null, global);
goog.exportSymbol("proto.financial.Params", null, global);
goog.exportSymbol("proto.financial.PaymentParams", null, global);
goog.exportSymbol("proto.financial.Payoff", null, global);
goog.exportSymbol("proto.financial.Request", null, global);
goog.exportSymbol("proto.financial.Response", null, global);
goog.exportSymbol("proto.financial.Salary", null, global);
goog.exportSymbol("proto.financial.SectorProfit", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Request.displayName = "proto.financial.Request";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Request.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Request.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Request} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Request.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Request}
 */
proto.financial.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Request();
  return proto.financial.Request.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Request}
 */
proto.financial.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Salary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.Salary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Salary.displayName = "proto.financial.Salary";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Salary.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Salary.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Salary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Salary.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        amount: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        repeated: jspb.Message.getFieldWithDefault(msg, 4, false),
        period: jspb.Message.getFieldWithDefault(msg, 5, 0),
        id: jspb.Message.getFieldWithDefault(msg, 6, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Salary}
 */
proto.financial.Salary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Salary();
  return proto.financial.Salary.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Salary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Salary}
 */
proto.financial.Salary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTimestamp(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRepeated(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPeriod(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Salary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Salary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Salary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Salary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getRepeated();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.financial.Salary.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.financial.Salary.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.financial.Salary.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.financial.Salary.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional float amount = 3;
 * @return {number}
 */
proto.financial.Salary.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    3,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Salary.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional bool repeated = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.financial.Salary.prototype.getRepeated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    false
  ));
};

/** @param {boolean} value */
proto.financial.Salary.prototype.setRepeated = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional int64 period = 5;
 * @return {number}
 */
proto.financial.Salary.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.financial.Salary.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string id = 6;
 * @return {string}
 */
proto.financial.Salary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/** @param {string} value */
proto.financial.Salary.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.PaymentParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.PaymentParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.PaymentParams.displayName = "proto.financial.PaymentParams";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.PaymentParams.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.financial.PaymentParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.PaymentParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.PaymentParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        amount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.PaymentParams}
 */
proto.financial.PaymentParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.PaymentParams();
  return proto.financial.PaymentParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.PaymentParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.PaymentParams}
 */
proto.financial.PaymentParams.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.PaymentParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.PaymentParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.PaymentParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.PaymentParams.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.financial.PaymentParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.financial.PaymentParams.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional float amount = 2;
 * @return {number}
 */
proto.financial.PaymentParams.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    2,
    0.0
  ));
};

/** @param {number} value */
proto.financial.PaymentParams.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Expenses = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.financial.Expenses.repeatedFields_,
    null
  );
};
goog.inherits(proto.financial.Expenses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Expenses.displayName = "proto.financial.Expenses";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.financial.Expenses.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Expenses.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Expenses.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Expenses} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Expenses.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        expenseList: jspb.Message.toObjectList(
          msg.getExpenseList(),
          proto.financial.Expense.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Expenses}
 */
proto.financial.Expenses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Expenses();
  return proto.financial.Expenses.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Expenses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Expenses}
 */
proto.financial.Expenses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.financial.Expense();
        reader.readMessage(
          value,
          proto.financial.Expense.deserializeBinaryFromReader
        );
        msg.addExpense(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Expenses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Expenses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Expenses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Expenses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpenseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.financial.Expense.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Expense expense = 1;
 * @return {!Array<!proto.financial.Expense>}
 */
proto.financial.Expenses.prototype.getExpenseList = function() {
  return /** @type{!Array<!proto.financial.Expense>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.financial.Expense,
    1
  ));
};

/** @param {!Array<!proto.financial.Expense>} value */
proto.financial.Expenses.prototype.setExpenseList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.financial.Expense=} opt_value
 * @param {number=} opt_index
 * @return {!proto.financial.Expense}
 */
proto.financial.Expenses.prototype.addExpense = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.financial.Expense,
    opt_index
  );
};

proto.financial.Expenses.prototype.clearExpenseList = function() {
  this.setExpenseList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Expense = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.Expense, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Expense.displayName = "proto.financial.Expense";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Expense.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Expense.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Expense} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Expense.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        amount: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        repeated: jspb.Message.getFieldWithDefault(msg, 4, false),
        period: jspb.Message.getFieldWithDefault(msg, 5, 0),
        id: jspb.Message.getFieldWithDefault(msg, 6, ""),
        step: jspb.Message.getFieldWithDefault(msg, 7, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Expense}
 */
proto.financial.Expense.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Expense();
  return proto.financial.Expense.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Expense} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Expense}
 */
proto.financial.Expense.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTimestamp(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRepeated(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPeriod(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setStep(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Expense.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Expense.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Expense} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Expense.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getRepeated();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getStep();
  if (f !== 0) {
    writer.writeInt32(7, f);
  }
};

/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.financial.Expense.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.financial.Expense.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.financial.Expense.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.financial.Expense.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional float amount = 3;
 * @return {number}
 */
proto.financial.Expense.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    3,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Expense.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional bool repeated = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.financial.Expense.prototype.getRepeated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    false
  ));
};

/** @param {boolean} value */
proto.financial.Expense.prototype.setRepeated = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional int64 period = 5;
 * @return {number}
 */
proto.financial.Expense.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.financial.Expense.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string id = 6;
 * @return {string}
 */
proto.financial.Expense.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/** @param {string} value */
proto.financial.Expense.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional int32 step = 7;
 * @return {number}
 */
proto.financial.Expense.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/** @param {number} value */
proto.financial.Expense.prototype.setStep = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Params.displayName = "proto.financial.Params";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Params.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Params.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Params} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Params.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        amount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        description: jspb.Message.getFieldWithDefault(msg, 3, ""),
        to: jspb.Message.getFieldWithDefault(msg, 4, ""),
        query:
          (f = msg.getQuery()) &&
          products_products_pb.Query.toObject(includeInstance, f),
        id: jspb.Message.getFieldWithDefault(msg, 6, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Params}
 */
proto.financial.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Params();
  return proto.financial.Params.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Params}
 */
proto.financial.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setTo(value);
        break;
      case 5:
        var value = new products_products_pb.Query();
        reader.readMessage(
          value,
          products_products_pb.Query.deserializeBinaryFromReader
        );
        msg.setQuery(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      products_products_pb.Query.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.financial.Params.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.financial.Params.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional float amount = 2;
 * @return {number}
 */
proto.financial.Params.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    2,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Params.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional string description = 3;
 * @return {string}
 */
proto.financial.Params.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/** @param {string} value */
proto.financial.Params.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string to = 4;
 * @return {string}
 */
proto.financial.Params.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/** @param {string} value */
proto.financial.Params.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional products.Query query = 5;
 * @return {?proto.products.Query}
 */
proto.financial.Params.prototype.getQuery = function() {
  return /** @type{?proto.products.Query} */ (jspb.Message.getWrapperField(
    this,
    products_products_pb.Query,
    5
  ));
};

/** @param {?proto.products.Query|undefined} value */
proto.financial.Params.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.financial.Params.prototype.clearQuery = function() {
  this.setQuery(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.financial.Params.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional string id = 6;
 * @return {string}
 */
proto.financial.Params.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/** @param {string} value */
proto.financial.Params.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Payoff = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.financial.Payoff.repeatedFields_,
    null
  );
};
goog.inherits(proto.financial.Payoff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Payoff.displayName = "proto.financial.Payoff";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.financial.Payoff.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Payoff.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Payoff.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Payoff} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Payoff.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        supplierid: jspb.Message.getFieldWithDefault(msg, 1, ""),
        timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
        toreceive: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        paid: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
        quoteid: jspb.Message.getFieldWithDefault(msg, 5, ""),
        sectorsList: jspb.Message.toObjectList(
          msg.getSectorsList(),
          proto.financial.SectorProfit.toObject,
          includeInstance
        ),
        profitless: +jspb.Message.getFieldWithDefault(msg, 7, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Payoff}
 */
proto.financial.Payoff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Payoff();
  return proto.financial.Payoff.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Payoff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Payoff}
 */
proto.financial.Payoff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSupplierid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTimestamp(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setToreceive(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setPaid(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setQuoteid(value);
        break;
      case 6:
        var value = new proto.financial.SectorProfit();
        reader.readMessage(
          value,
          proto.financial.SectorProfit.deserializeBinaryFromReader
        );
        msg.addSectors(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setProfitless(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Payoff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Payoff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Payoff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Payoff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupplierid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getToreceive();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getPaid();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
  f = message.getQuoteid();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getSectorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.financial.SectorProfit.serializeBinaryToWriter
    );
  }
  f = message.getProfitless();
  if (f !== 0.0) {
    writer.writeFloat(7, f);
  }
};

/**
 * optional string supplierid = 1;
 * @return {string}
 */
proto.financial.Payoff.prototype.getSupplierid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.financial.Payoff.prototype.setSupplierid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.financial.Payoff.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.financial.Payoff.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional float toreceive = 3;
 * @return {number}
 */
proto.financial.Payoff.prototype.getToreceive = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    3,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Payoff.prototype.setToreceive = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional float paid = 4;
 * @return {number}
 */
proto.financial.Payoff.prototype.getPaid = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    4,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Payoff.prototype.setPaid = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional string quoteid = 5;
 * @return {string}
 */
proto.financial.Payoff.prototype.getQuoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/** @param {string} value */
proto.financial.Payoff.prototype.setQuoteid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * repeated SectorProfit sectors = 6;
 * @return {!Array<!proto.financial.SectorProfit>}
 */
proto.financial.Payoff.prototype.getSectorsList = function() {
  return /** @type{!Array<!proto.financial.SectorProfit>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.financial.SectorProfit,
    6
  ));
};

/** @param {!Array<!proto.financial.SectorProfit>} value */
proto.financial.Payoff.prototype.setSectorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.financial.SectorProfit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.financial.SectorProfit}
 */
proto.financial.Payoff.prototype.addSectors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    proto.financial.SectorProfit,
    opt_index
  );
};

proto.financial.Payoff.prototype.clearSectorsList = function() {
  this.setSectorsList([]);
};

/**
 * optional float profitless = 7;
 * @return {number}
 */
proto.financial.Payoff.prototype.getProfitless = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    7,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Payoff.prototype.setProfitless = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.SectorProfit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.SectorProfit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.SectorProfit.displayName = "proto.financial.SectorProfit";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.SectorProfit.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.financial.SectorProfit.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.SectorProfit} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.SectorProfit.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        amount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.SectorProfit}
 */
proto.financial.SectorProfit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.SectorProfit();
  return proto.financial.SectorProfit.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.SectorProfit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.SectorProfit}
 */
proto.financial.SectorProfit.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.SectorProfit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.SectorProfit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.SectorProfit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.SectorProfit.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.financial.SectorProfit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.financial.SectorProfit.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional float amount = 2;
 * @return {number}
 */
proto.financial.SectorProfit.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    2,
    0.0
  ));
};

/** @param {number} value */
proto.financial.SectorProfit.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Response = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.financial.Response.repeatedFields_,
    null
  );
};
goog.inherits(proto.financial.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Response.displayName = "proto.financial.Response";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.financial.Response.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Response.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Response.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Response} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Response.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        incomeList: jspb.Message.toObjectList(
          msg.getIncomeList(),
          proto.financial.Payoff.toObject,
          includeInstance
        ),
        banksList: jspb.Message.toObjectList(
          msg.getBanksList(),
          proto.financial.Bank.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Response}
 */
proto.financial.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Response();
  return proto.financial.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Response}
 */
proto.financial.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.financial.Payoff();
        reader.readMessage(
          value,
          proto.financial.Payoff.deserializeBinaryFromReader
        );
        msg.addIncome(value);
        break;
      case 2:
        var value = new proto.financial.Bank();
        reader.readMessage(
          value,
          proto.financial.Bank.deserializeBinaryFromReader
        );
        msg.addBanks(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncomeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.financial.Payoff.serializeBinaryToWriter
    );
  }
  f = message.getBanksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.financial.Bank.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Payoff income = 1;
 * @return {!Array<!proto.financial.Payoff>}
 */
proto.financial.Response.prototype.getIncomeList = function() {
  return /** @type{!Array<!proto.financial.Payoff>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.financial.Payoff,
    1
  ));
};

/** @param {!Array<!proto.financial.Payoff>} value */
proto.financial.Response.prototype.setIncomeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.financial.Payoff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.financial.Payoff}
 */
proto.financial.Response.prototype.addIncome = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.financial.Payoff,
    opt_index
  );
};

proto.financial.Response.prototype.clearIncomeList = function() {
  this.setIncomeList([]);
};

/**
 * repeated Bank banks = 2;
 * @return {!Array<!proto.financial.Bank>}
 */
proto.financial.Response.prototype.getBanksList = function() {
  return /** @type{!Array<!proto.financial.Bank>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.financial.Bank,
    2
  ));
};

/** @param {!Array<!proto.financial.Bank>} value */
proto.financial.Response.prototype.setBanksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.financial.Bank=} opt_value
 * @param {number=} opt_index
 * @return {!proto.financial.Bank}
 */
proto.financial.Response.prototype.addBanks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.financial.Bank,
    opt_index
  );
};

proto.financial.Response.prototype.clearBanksList = function() {
  this.setBanksList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.Bank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.Bank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.Bank.displayName = "proto.financial.Bank";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.Bank.prototype.toObject = function(opt_includeInstance) {
    return proto.financial.Bank.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.Bank} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.Bank.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        money: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        color: jspb.Message.getFieldWithDefault(msg, 3, ""),
        userid: jspb.Message.getFieldWithDefault(msg, 4, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.Bank}
 */
proto.financial.Bank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.Bank();
  return proto.financial.Bank.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.Bank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.Bank}
 */
proto.financial.Bank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setMoney(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setColor(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.Bank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.Bank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.Bank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.Bank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMoney();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.financial.Bank.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.financial.Bank.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional float money = 2;
 * @return {number}
 */
proto.financial.Bank.prototype.getMoney = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    2,
    0.0
  ));
};

/** @param {number} value */
proto.financial.Bank.prototype.setMoney = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional string color = 3;
 * @return {string}
 */
proto.financial.Bank.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/** @param {string} value */
proto.financial.Bank.prototype.setColor = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string userid = 4;
 * @return {string}
 */
proto.financial.Bank.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/** @param {string} value */
proto.financial.Bank.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.financial.EmptyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.financial.EmptyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.financial.EmptyResponse.displayName = "proto.financial.EmptyResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.financial.EmptyResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.financial.EmptyResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.financial.EmptyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.financial.EmptyResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.financial.EmptyResponse}
 */
proto.financial.EmptyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.financial.EmptyResponse();
  return proto.financial.EmptyResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.financial.EmptyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.financial.EmptyResponse}
 */
proto.financial.EmptyResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.financial.EmptyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.financial.EmptyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.financial.EmptyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.financial.EmptyResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
};

goog.object.extend(exports, proto.financial);
