/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var products_products_pb = require("../products/products_pb.js");
goog.exportSymbol("proto.authorization.LoginParams", null, global);
goog.exportSymbol("proto.authorization.Params", null, global);
goog.exportSymbol("proto.authorization.PasswordChange", null, global);
goog.exportSymbol("proto.authorization.Permission", null, global);
goog.exportSymbol("proto.authorization.PermissionParams", null, global);
goog.exportSymbol("proto.authorization.Response", null, global);
goog.exportSymbol("proto.authorization.Stats", null, global);
goog.exportSymbol("proto.authorization.User", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.User.displayName = "proto.authorization.User";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.User.prototype.toObject = function(opt_includeInstance) {
    return proto.authorization.User.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.User} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.User.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        firstname: jspb.Message.getFieldWithDefault(msg, 1, ""),
        midname: jspb.Message.getFieldWithDefault(msg, 2, ""),
        lastname: jspb.Message.getFieldWithDefault(msg, 3, ""),
        phonenumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
        email: jspb.Message.getFieldWithDefault(msg, 5, ""),
        password: jspb.Message.getFieldWithDefault(msg, 6, ""),
        role: jspb.Message.getFieldWithDefault(msg, 7, ""),
        id: jspb.Message.getFieldWithDefault(msg, 8, ""),
        state: jspb.Message.getFieldWithDefault(msg, 9, ""),
        city: jspb.Message.getFieldWithDefault(msg, 10, ""),
        address: jspb.Message.getFieldWithDefault(msg, 11, ""),
        cnpj: jspb.Message.getFieldWithDefault(msg, 12, ""),
        companyname: jspb.Message.getFieldWithDefault(msg, 13, ""),
        category: jspb.Message.getFieldWithDefault(msg, 14, ""),
        zip: jspb.Message.getFieldWithDefault(msg, 15, ""),
        username: jspb.Message.getFieldWithDefault(msg, 16, ""),
        companyid: jspb.Message.getFieldWithDefault(msg, 17, ""),
        permission:
          (f = msg.getPermission()) &&
          proto.authorization.Permission.toObject(includeInstance, f),
        salaryid: jspb.Message.getFieldWithDefault(msg, 19, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.User}
 */
proto.authorization.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.User();
  return proto.authorization.User.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.User}
 */
proto.authorization.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirstname(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMidname(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLastname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhonenumber(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setRole(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setState(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setCity(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setCnpj(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setCompanyname(value);
        break;
      case 14:
        var value = /** @type {string} */ (reader.readString());
        msg.setCategory(value);
        break;
      case 15:
        var value = /** @type {string} */ (reader.readString());
        msg.setZip(value);
        break;
      case 16:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 17:
        var value = /** @type {string} */ (reader.readString());
        msg.setCompanyid(value);
        break;
      case 18:
        var value = new proto.authorization.Permission();
        reader.readMessage(
          value,
          proto.authorization.Permission.deserializeBinaryFromReader
        );
        msg.setPermission(value);
        break;
      case 19:
        var value = /** @type {string} */ (reader.readString());
        msg.setSalaryid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMidname();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
  f = message.getCnpj();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
  f = message.getCompanyname();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(14, f);
  }
  f = message.getZip();
  if (f.length > 0) {
    writer.writeString(15, f);
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(16, f);
  }
  f = message.getCompanyid();
  if (f.length > 0) {
    writer.writeString(17, f);
  }
  f = message.getPermission();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.authorization.Permission.serializeBinaryToWriter
    );
  }
  f = message.getSalaryid();
  if (f.length > 0) {
    writer.writeString(19, f);
  }
};

/**
 * optional string FirstName = 1;
 * @return {string}
 */
proto.authorization.User.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setFirstname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string MidName = 2;
 * @return {string}
 */
proto.authorization.User.prototype.getMidname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setMidname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string LastName = 3;
 * @return {string}
 */
proto.authorization.User.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setLastname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string PhoneNumber = 4;
 * @return {string}
 */
proto.authorization.User.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setPhonenumber = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string Email = 5;
 * @return {string}
 */
proto.authorization.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string Password = 6;
 * @return {string}
 */
proto.authorization.User.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string Role = 7;
 * @return {string}
 */
proto.authorization.User.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string ID = 8;
 * @return {string}
 */
proto.authorization.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional string State = 9;
 * @return {string}
 */
proto.authorization.User.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string City = 10;
 * @return {string}
 */
proto.authorization.User.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional string Address = 11;
 * @return {string}
 */
proto.authorization.User.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};

/**
 * optional string CNPJ = 12;
 * @return {string}
 */
proto.authorization.User.prototype.getCnpj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setCnpj = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};

/**
 * optional string CompanyName = 13;
 * @return {string}
 */
proto.authorization.User.prototype.getCompanyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setCompanyname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};

/**
 * optional string Category = 14;
 * @return {string}
 */
proto.authorization.User.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setCategory = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};

/**
 * optional string Zip = 15;
 * @return {string}
 */
proto.authorization.User.prototype.getZip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setZip = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};

/**
 * optional string Username = 16;
 * @return {string}
 */
proto.authorization.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};

/**
 * optional string Companyid = 17;
 * @return {string}
 */
proto.authorization.User.prototype.getCompanyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setCompanyid = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};

/**
 * optional Permission permission = 18;
 * @return {?proto.authorization.Permission}
 */
proto.authorization.User.prototype.getPermission = function() {
  return /** @type{?proto.authorization.Permission} */ (jspb.Message.getWrapperField(
    this,
    proto.authorization.Permission,
    18
  ));
};

/** @param {?proto.authorization.Permission|undefined} value */
proto.authorization.User.prototype.setPermission = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};

proto.authorization.User.prototype.clearPermission = function() {
  this.setPermission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.authorization.User.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 18) != null;
};

/**
 * optional string salaryid = 19;
 * @return {string}
 */
proto.authorization.User.prototype.getSalaryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};

/** @param {string} value */
proto.authorization.User.prototype.setSalaryid = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.PermissionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.PermissionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.PermissionParams.displayName =
    "proto.authorization.PermissionParams";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.PermissionParams.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.PermissionParams.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.PermissionParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.PermissionParams.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        permission:
          (f = msg.getPermission()) &&
          proto.authorization.Permission.toObject(includeInstance, f),
        id: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.PermissionParams}
 */
proto.authorization.PermissionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.PermissionParams();
  return proto.authorization.PermissionParams.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.PermissionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.PermissionParams}
 */
proto.authorization.PermissionParams.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.authorization.Permission();
        reader.readMessage(
          value,
          proto.authorization.Permission.deserializeBinaryFromReader
        );
        msg.setPermission(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.PermissionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.PermissionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.PermissionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.PermissionParams.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getPermission();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.authorization.Permission.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional Permission permission = 1;
 * @return {?proto.authorization.Permission}
 */
proto.authorization.PermissionParams.prototype.getPermission = function() {
  return /** @type{?proto.authorization.Permission} */ (jspb.Message.getWrapperField(
    this,
    proto.authorization.Permission,
    1
  ));
};

/** @param {?proto.authorization.Permission|undefined} value */
proto.authorization.PermissionParams.prototype.setPermission = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.authorization.PermissionParams.prototype.clearPermission = function() {
  this.setPermission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.authorization.PermissionParams.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string id = 2;
 * @return {string}
 */
proto.authorization.PermissionParams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.authorization.PermissionParams.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.Permission.displayName = "proto.authorization.Permission";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.Permission.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.Permission.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.Permission} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.Permission.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        financial: jspb.Message.getFieldWithDefault(msg, 1, false),
        quotes: jspb.Message.getFieldWithDefault(msg, 2, false),
        stock: jspb.Message.getFieldWithDefault(msg, 3, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.Permission}
 */
proto.authorization.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.Permission();
  return proto.authorization.Permission.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.Permission}
 */
proto.authorization.Permission.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setFinancial(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setQuotes(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setStock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.Permission.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getFinancial();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getQuotes();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getStock();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional bool financial = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.authorization.Permission.prototype.getFinancial = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    false
  ));
};

/** @param {boolean} value */
proto.authorization.Permission.prototype.setFinancial = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional bool quotes = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.authorization.Permission.prototype.getQuotes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    false
  ));
};

/** @param {boolean} value */
proto.authorization.Permission.prototype.setQuotes = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional bool stock = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.authorization.Permission.prototype.getStock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    false
  ));
};

/** @param {boolean} value */
proto.authorization.Permission.prototype.setStock = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.PasswordChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.PasswordChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.PasswordChange.displayName =
    "proto.authorization.PasswordChange";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.PasswordChange.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.PasswordChange.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.PasswordChange} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.PasswordChange.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        old: jspb.Message.getFieldWithDefault(msg, 2, ""),
        pb_new: jspb.Message.getFieldWithDefault(msg, 3, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.PasswordChange}
 */
proto.authorization.PasswordChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.PasswordChange();
  return proto.authorization.PasswordChange.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.PasswordChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.PasswordChange}
 */
proto.authorization.PasswordChange.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setOld(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setNew(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.PasswordChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.PasswordChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.PasswordChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.PasswordChange.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getOld();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getNew();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.authorization.PasswordChange.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.authorization.PasswordChange.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string old = 2;
 * @return {string}
 */
proto.authorization.PasswordChange.prototype.getOld = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.authorization.PasswordChange.prototype.setOld = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string new = 3;
 * @return {string}
 */
proto.authorization.PasswordChange.prototype.getNew = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/** @param {string} value */
proto.authorization.PasswordChange.prototype.setNew = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.LoginParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.LoginParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.LoginParams.displayName =
    "proto.authorization.LoginParams";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.LoginParams.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.LoginParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.LoginParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.LoginParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ""),
        password: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.LoginParams}
 */
proto.authorization.LoginParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.LoginParams();
  return proto.authorization.LoginParams.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.LoginParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.LoginParams}
 */
proto.authorization.LoginParams.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.LoginParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.LoginParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.LoginParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.LoginParams.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string Email = 1;
 * @return {string}
 */
proto.authorization.LoginParams.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.authorization.LoginParams.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string Password = 2;
 * @return {string}
 */
proto.authorization.LoginParams.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.authorization.LoginParams.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.Response = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.authorization.Response.repeatedFields_,
    null
  );
};
goog.inherits(proto.authorization.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.Response.displayName = "proto.authorization.Response";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.authorization.Response.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.Response.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.Response.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.Response} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.Response.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ""),
        usersList: jspb.Message.toObjectList(
          msg.getUsersList(),
          proto.authorization.User.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.Response}
 */
proto.authorization.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.Response();
  return proto.authorization.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.Response}
 */
proto.authorization.Response.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = new proto.authorization.User();
        reader.readMessage(
          value,
          proto.authorization.User.deserializeBinaryFromReader
        );
        msg.addUsers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.Response.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.authorization.User.serializeBinaryToWriter
    );
  }
};

/**
 * optional string Token = 1;
 * @return {string}
 */
proto.authorization.Response.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.authorization.Response.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated User users = 2;
 * @return {!Array<!proto.authorization.User>}
 */
proto.authorization.Response.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.authorization.User>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.authorization.User,
    2
  ));
};

/** @param {!Array<!proto.authorization.User>} value */
proto.authorization.Response.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.authorization.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.authorization.User}
 */
proto.authorization.Response.prototype.addUsers = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.authorization.User,
    opt_index
  );
};

proto.authorization.Response.prototype.clearUsersList = function() {
  this.setUsersList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.Params.displayName = "proto.authorization.Params";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.Params.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.authorization.Params.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.Params} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.Params.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        salaryid: jspb.Message.getFieldWithDefault(msg, 2, ""),
        query:
          (f = msg.getQuery()) &&
          products_products_pb.Query.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.Params}
 */
proto.authorization.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.Params();
  return proto.authorization.Params.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.Params}
 */
proto.authorization.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSalaryid(value);
        break;
      case 3:
        var value = new products_products_pb.Query();
        reader.readMessage(
          value,
          products_products_pb.Query.deserializeBinaryFromReader
        );
        msg.setQuery(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSalaryid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      products_products_pb.Query.serializeBinaryToWriter
    );
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.authorization.Params.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.authorization.Params.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string salaryid = 2;
 * @return {string}
 */
proto.authorization.Params.prototype.getSalaryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.authorization.Params.prototype.setSalaryid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional products.Query query = 3;
 * @return {?proto.products.Query}
 */
proto.authorization.Params.prototype.getQuery = function() {
  return /** @type{?proto.products.Query} */ (jspb.Message.getWrapperField(
    this,
    products_products_pb.Query,
    3
  ));
};

/** @param {?proto.products.Query|undefined} value */
proto.authorization.Params.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.authorization.Params.prototype.clearQuery = function() {
  this.setQuery(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.authorization.Params.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authorization.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authorization.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authorization.Stats.displayName = "proto.authorization.Stats";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.authorization.Stats.prototype.toObject = function(opt_includeInstance) {
    return proto.authorization.Stats.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.authorization.Stats} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.authorization.Stats.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        quotes: jspb.Message.getFieldWithDefault(msg, 1, 0),
        completed: jspb.Message.getFieldWithDefault(msg, 2, 0),
        services: jspb.Message.getFieldWithDefault(msg, 3, 0),
        pb_new: jspb.Message.getFieldWithDefault(msg, 4, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authorization.Stats}
 */
proto.authorization.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authorization.Stats();
  return proto.authorization.Stats.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authorization.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authorization.Stats}
 */
proto.authorization.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setQuotes(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCompleted(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setServices(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNew(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authorization.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.authorization.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authorization.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authorization.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotes();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getServices();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getNew();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
};

/**
 * optional uint32 quotes = 1;
 * @return {number}
 */
proto.authorization.Stats.prototype.getQuotes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.authorization.Stats.prototype.setQuotes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 completed = 2;
 * @return {number}
 */
proto.authorization.Stats.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.authorization.Stats.prototype.setCompleted = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 services = 3;
 * @return {number}
 */
proto.authorization.Stats.prototype.getServices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.authorization.Stats.prototype.setServices = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint32 new = 4;
 * @return {number}
 */
proto.authorization.Stats.prototype.getNew = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.authorization.Stats.prototype.setNew = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

goog.object.extend(exports, proto.authorization);
